package ml.zedlabs.tbd.databases.media_db

import androidx.room.*
import kotlinx.coroutines.flow.Flow
import ml.zedlabs.data.local_db.AddedList
import ml.zedlabs.data.local_db.WatchStatusUpdate

//Sample DB access interface for ROOM (concretions are generated by ROOM)
@Dao
interface AddedListDao {
    @Query("SELECT * FROM addedlist ORDER BY last_update DESC")
    fun getAll(): Flow<List<AddedList>>

    @Query("SELECT * FROM addedlist WHERE media_id IN (:mediaIds)")
    suspend fun loadAllByIds(mediaIds: IntArray): List<AddedList>?

    @Query("SELECT * FROM addedlist WHERE media_id = :mediaId")
    suspend fun getById(mediaId: Int): AddedList?

    @Query("SELECT * FROM addedlist WHERE media_name LIKE :name")
    suspend fun findByName(name: String): AddedList?

    @Insert
    suspend fun insertAll(vararg items: AddedList)

    @Query("DELETE FROM addedlist WHERE media_id = :id")
    suspend fun delete(id: Int)

    @Query("DELETE FROM addedlist")
    suspend fun deleteAll()

    @Update(entity = AddedList::class)
    suspend fun update(obj: WatchStatusUpdate)

}
